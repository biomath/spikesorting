function caraslab_kilosort(datadir,sel)
%caraslab_kilosort(datadir,sel)
%
%This function runs kilosort.
%
%Input variables:
%
%       datadir: path to folder containing data directories. Each directory
%                should contain a binary (-dat) data file and
%                a kilosort configuration (config.mat) file. Both of
%                these files are generated by caraslab_createconfig.m
%
%       sel:    if 0 or omitted, program will cycle through all folders
%               in the data directory.    
%
%               if 1, program will prompt user to select folder
%
%Written by ML Caras March 26, 2019 
%Modified from master_file_example_MOVEME.m in kilosort master repo.


%Validate inputs
narginchk(1,2)
if ~exist(datadir,'dir')
    fprintf('\nCannot find data directory!\n')
    return
end

%Default to cycling through all -mat files
if nargin < 2
    sel = 0;   
end


if ~sel
    %Get a list of all folders in the data directory
    folders = caraslab_lsdir(datadir);
    foldernames = extractfield(folders,'name');

elseif sel  
    %Prompt user to select folder
    pname = uigetdir(datadir,'Select data directory');
    [~,name] = fileparts(pname);
    foldernames = {name};  
    
end


%For each data folder...
for i = 1:numel(foldernames)
    clear ops rez
    
    %Define the path to the current data
    currpath = fullfile(datadir,foldernames{i});
    
    %Load in configuration file (contains ops struct)
    load(fullfile(currpath, 'config.mat'));
    
    %Check that ops.root directtory exists
    if ~exist(ops.root,'dir')
        [success,message,messageID] = mkdir(ops.root);
        
        %Stop if directory cannot be created
        if ~success
            message %#ok<*NOPRT>
            messageID
            return
        end
    end
    
    
    %Start timer
    tic;
    
    %Initialize GPU (will erase any existing GPU arrays)
    if ops.GPU
        gpuDevice(1);
    end
    
    %Preprocess data and extract spikes for initialization
    [rez, DATA, uproj] = preprocessData(ops);
    
    %Fit templates iteratively
    rez = fitTemplates(rez, DATA, uproj);
    
    %Extract final spike times (overlapping extraction)
    rez = fullMPMU(rez, DATA);
    
    % AutoMerge. rez2Phy will use for clusters the new 5th column of st3 if you run this)
    % rez = merge_posthoc2(rez);

    %Save data
    save(fullfile(ops.root,  'rez.mat'), 'rez', '-v7.3');
    
    %Save python results file for Phy
    rezToPhy(rez, ops.root);
    
    %Remove temporary file
    delete(ops.fproc);
    
    
end





