function caraslab_preprocess(datadir,sel)
%caraslab_preprocess(datadir,sel)
%
% This function loads in one data file at a time, removes large
% amplitude artifacts, bandpass filters the data between 300-7000 Hz, 
% using a 3rd order butterworth acausal filter, and applies common average
% referencing as described in Ludwig et al.(2009)J Neurophys 101(3):1679-89
% 
% Input variables:
%
%       datadir:    path to folder containing data directories. Each directory
%                   should contain a kilosort configuration (config.mat) 
%                   file generated by caraslab_createconfig.m
%
%       sel:         if 0 or omitted, program will cycle through all folders
%                    in the data directory.    
%
%                    if 1, program will prompt user to select folder
%
%Written by ML Caras Mar 27 2019

%Validate inputs
narginchk(1,2)
if ~exist(datadir,'dir')
    fprintf('\nCannot find data directory!\n')
    return
end

%Set defaults
if nargin == 1
    sel = 0; %cycle through all folders
end


if ~sel
    %Get a list of all folders in the data directory
    folders = caraslab_lsdir(datadir);
    foldernames = extractfield(folders,'name');

elseif sel  
    %Prompt user to select folder
    pname = uigetdir(datadir,'Select data folder');
    [~,name] = fileparts(pname);
    foldernames = {name};  
end


%Loop through files
for i = 1:numel(foldernames)
    clear ops rawsig cleansig
    
    %Define the path to the current data
    currpath = fullfile(datadir,foldernames{i});
    
    %Load in configuration file ops struct
    load(fullfile(currpath, 'config.mat'),'ops');
        
    %Get sampling rate 
    fs = ops.fs;
    
    %Get number of channels and identity of bad channels
    nchans = ops.NchanTOT;
    badchans = ops.badchannels;
     
    %Load in raw voltage streams (M x N matrix),
    %where M = num samples and N = num channels
    load(ops.rawdata,'rawsig')

    %Apply artifact rejection
    [cleansig, rejectthresh] = caraslab_artifact_reject(rawsig,fs);
    
    %Create bandpass filter parameters
    hp = 300;   %High pass (Hz)
    lp = 7000;  %Low pass (Hz)
    [b1, a1] = butter(3, [hp/fs,lp/fs]*2, 'bandpass');
    
    %Filter the cleaned data
    fprintf('Bandpass filtering cleaned data...\n')
    cleansig = filter(b1, a1, cleansig);
    cleansig = flipud(cleansig);
    cleansig = filter(b1, a1, cleansig);
    cleansig = flipud(cleansig);    
    fprintf('done.\n');

    
    %Apply common average referencing
    fprintf('Applying common average referencing...\n')
    [cleansig,badchans] = caraslab_CAR(cleansig,nchans,badchans);
    fprintf('done.\n');
    
    
    %Filter the raw data
    fprintf('Bandpass filtering raw data...\n');
    rawsig = filter(b1, a1, rawsig);
    rawsig = flipud(rawsig);
    rawsig = filter(b1, a1, rawsig);
    rawsig = flipud(rawsig);   
    fprintf('done.\n')
    
    
    %Save -mat file with cleaned data
    [path,name,~] = fileparts(ops.rawdata);
    cleanfilename = [path filesep name '_CLEAN.mat'];
    fprintf('\nSaving cleaned data: %s.....',[name,'_CLEAN.csv']);
    save(cleanfilename,cleansig,'-v7.3');
    fprintf('done.\n');
    
    %Save -mat file with filtered raw data
    fltfilename = [path filesep name '_RAWFLT.mat'];
    fprintf('\nSaving raw filtered data: %s.....',[name,'_RAWFLT.csv']);
    save(fltfilename,rawsig,'-v7.3');
    fprintf('done.\n');
    
    
    %Update ops structure
    ops.cleandata = cleanfilename;   
    ops.rawfltdata = fltfilename;
    ops.badchannels = badchans;
    save(fullfile(currpath, 'config.mat'),'ops')
    fprintf('Updated ops struct in config file: %s\n', configfilename)
    
    
    
%--------------------------------------------------------------------------    
% NOT CURRENTLY IN USE, BUT COULD BE IMPLEMENTED AT A LATER DATE
%--------------------------------------------------------------------------   
%Option to create a tall array from csv data
%
%     %Create datastore from -csv data
%     fprintf('================\nProcessing %s \n', foldernames{i});
%     fprintf('Creating datastore.......');
%     ds = datastore(ops.csvdata);
%     fprintf(' done.\n')
%     
%     %Create tall table from datastore
%     fprintf('Creating tall array.......');
%     talltable = tall(ds);
%     fprintf(' done.\n');
%     
%     %Convert tall table to a tall matrix- contains raw signal data
%     rawsig = table2array(talltable);
%
%     %Save csv file with cleaned data
%     [path,name,~] = fileparts(ops.csvdata);
%     csvfilename = [path filesep name '_CLEAN.csv'];
%     fprintf('\nSaving cleaned data: %s.....',[name,'_CLEAN.csv']);
%     dlmwrite(csvfilename,cleansig,'precision',7);
%     fprintf('done.\n');
%      
%     %Update ops structure with path to clean csv file
%     ops.csvdata = csvfilename;    
%     save(fullfile(currpath, 'Config.mat'),'ops')
%     fprintf('Updated ops struct in config file: %s\n', configfilename)
%--------------------------------------------------------------------------   

end




